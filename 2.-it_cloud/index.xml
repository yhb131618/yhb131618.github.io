<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/2.-it_cloud/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <atom:link href="http://localhost:1313/2.-it_cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/cloud/</guid>
      <description>개요 # 01_클라우드의 역사 # 1960년대 가상화라는 용어를 사용하기 시작 당시에는 전 가상화 기법을 사용하여 구현 에뮬레이터도 존재 다양한 하이퍼바이저의 출현 IBM의 Logical Partition VMware Xen Hyper-V KVM 가상화란 물리적 하드웨어 리소스(CPU, RAM, STORAGE, NETWORK)들을 직접 공유하는 방식 또는 호스트 OS에 의해 제공받는 방식으로 만들어지는 하나의 Virtual PC이다.&#xA;IBM M44/44X 시스템에서 유래하였다.&#xA;flowchart LR BareMetal --&gt; 가상화; 가상화 --&gt; 유형1; 가상화 --&gt; 유형2; 유형1 --&gt; 커널_공유방식; 유형2 --&gt; Host_공유방식; 유형1 : 하이퍼바이저(KVM, GEN, ESXI) 유형2 : (Vmware)</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/common_%EC%BB%A4%EB%84%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/common_%EC%BB%A4%EB%84%90/</guid>
      <description>01_커널이란? # #커널 #쉘 #Shell&#xA;[[[content/7. IT_Network/가상화|가상화]]&#xA;커널은 운영체제 자체라 보기도 하고, 운영체제의 핵심이라고 말하기도 한다.&#xA;즉, 커널은 하드웨어의 자원을 관리하는 역할을 한다.&#xA;flowchart TD 컴퓨터--&gt;하드웨어; 컴퓨터--&gt;소프트웨어; 소프트웨어--&gt;운영체제; 소프트웨어--&gt;응용프로그램; 운영체제--&gt;커널; 운영체제--&gt;시스템프로그램; 시스템 프로그램은 사용자와 상호작용을 위한 역할을 한다.&#xA;대표적인 예로 쉴(shell)이라는 시스템 프로그램이 있으며,&#xA;쉴(shell)은 사용자가 컴퓨터에게 전달하는 명령어를 해석하는 프로그램으로 사용자와 컴퓨터간의 상호작용이 가능케 한다.&#xA;02_커널의 역할 # 컴퓨터의 물리적 자원과 추상화 자원을 관리하는 것이다.&#xA;여기서 추상화란 물리적으로 하나 뿐인 하드웨어를 여러 사용자들이 번갈아 사용하게 중재함으로서,</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/nca_01_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/nca_01_server/</guid>
      <description>![[assets/Pasted image 20240122152923.png]] ![[assets/Pasted image 20240122154924.png]]&#xA;Server # Server를 생성하려면 VPC와 Subnet을 만들고 난 이후 서버를 만들 수 있다. __ 1.1_VPC Create # IP private 대역(10.0.0.0/8,172.16.0.0/12,192.168.0.0/16) 내에서 /16~/28 범위여야 합니다. 예) 10.0.0.0/16 ![[assets/Pasted image 20240122165000.png]] __ 1.2_Network ACL # ![[assets/Pasted image 20240122165121.png]] ![[assets/Pasted image 20240122165330.png]] ![[assets/Pasted image 20240122165207.png]]&#xA;*Inbound 규칙 설정 우선순위: 0, 프로토콜: ICMP, 접근 소스: 0.0.0.0/0, 허용여부: 허용 우선순위: 10, 프로토콜: TCP, 접근 소스: 0.0.0.0/0, 포트: 80, 허용여부: 허용 우선순위: 15, 프로토콜: TCP, 접근 소스: 10.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/nca_02_loadblancer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/nca_02_loadblancer/</guid>
      <description>Load Balancer # Target Group 요청을 처리할 대상에 대한 집합 동일 VPC 내에 있는 서버들에 대해 타켓 그룹 생성 가능 타넷 그룹 안에 있는 서버를 다른 타켓 그룹에 속하게 할 수 있지만 타켓 그룹을 다수의 로드밸런서에 연결할 수 없음. 서비스를 수행하는 대상의 프로토콜에 따라 L4와 L7으로 구분 헬스체크 주기(5-300초) 및 임계값 설정 VPC 플랫폼: 헬스체크 주기 Default 30초, 주기 변경 가능 Classic 플랫폼: 헬스체크 주기 Default 6초, 주기 변경 불가능 기본은 Round Robin 설정 알고리즘 및 Sticky, ProxyProtocol 설정 변경은 생성 이후에 진행 !</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/nca_03_dns--cdn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/nca_03_dns--cdn/</guid>
      <description>DNS # ![[assets/Pasted image 20240124150541.png]] ![[assets/Pasted image 20240124150817.png]] ![[assets/Pasted image 20240124150951.png]]&#xA;IANA&#xA;Internet assigned numbers authority의 약어. 인터넷 할당 번호 관리 기관. IANA는 인터넷 소사이어티(ISOC)의 산하기관으로, 인터넷에 접속하기 위한 인터넷 프로토콜(IP)의 전 세계적 주소에 대하여 최종적인 조정과 관리를 하는 기관. ICANN&#xA;1998년 미국 상무부가 만들었다. 한국을 나타내는 ‘.kr’ 같은 국가별 인터넷 주소(도메인)와 회사를 뜻하는 ‘.com’ 같은 일반 최상위 도메인(Domain)의 생성 여부를 결정했다. TLD&#xA;최상위도메인(top level domain)은 그 도메인이 나타내는 기관분류 또는 국가, 그리고 등록처를 보여주는 것.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/nca_04_autoscaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/nca_04_autoscaling/</guid>
      <description>Auto Scale # Auto Scaling Group&#xA;여러 개의 서버 인스턴스들을 Auto Scaling Group 이라는 하나의 그룹으로 묶어 놓게 된다. Launch Configuration&#xA;가상 서버를 시작하는데 사용하는 템플릿 Auto Scaling Group을 생성할 때는 Launch Configuration을 지정해야 한다. ![[assets/Pasted image 20240122164759.png]] ![[assets/Pasted image 20240122164747.png]] 모리터링 기반 ![[assets/Pasted image 20240122163757.png]]&#xA;스케줄링 기반 ![[assets/Pasted image 20240122163814.png]]&#xA;매뉴얼 기반 ![[assets/Pasted image 20240122163830.png]]&#xA;01_Launch Configuration # ![[assets/Pasted image 20240124162735.png]]&#xA;Auto Scaling &amp;gt; Launch Configuration 선택 후 Launch Configuration 생성 !</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/nca_05_storage-/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/nca_05_storage-/</guid>
      <description>Auto Scale # Auto Scaling Group&#xA;여러 개의 서버 인스턴스들을 Auto Scaling Group 이라는 하나의 그룹으로 묶어 놓게 된다. Launch Configuration&#xA;가상 서버를 시작하는데 사용하는 템플릿 Auto Scaling Group을 생성할 때는 Launch Configuration을 지정해야 한다. ![[assets/Pasted image 20240122164759.png]] ![[assets/Pasted image 20240122164747.png]] 모리터링 기반 ![[assets/Pasted image 20240122163757.png]]&#xA;스케줄링 기반 ![[assets/Pasted image 20240122163814.png]]&#xA;매뉴얼 기반 ![[assets/Pasted image 20240122163830.png]]&#xA;01_Object Storage # ![[assets/Pasted image 20240124171448.png]] ![[assets/Pasted image 20240124171600.png]] ![[assets/Pasted image 20240124171648.png]] ![[assets/Pasted image 20240124171758.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/ci__harbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/ci__harbor/</guid>
      <description>Harbor # Docker Image Registry 01__ Outline # Harbor와 관련된 주요 기능은 다음과 같습니다.&#xA;Helm 차트 관리: 프로젝트별로 격리되고 RBAC에 의해 제어되는 Helm 차트를 관리하는 데 도움이 됩니다. LDAP 그룹별 역할 관리: 관리자는 LDAP/AD 그룹을 Harbor로 가져와 프로젝트 역할을 할당할 수 있습니다. 프로젝트 복제: 이미지 복제를 지원합니다. 하나의 Harbor 인스턴스에서 다른 Harbor 인스턴스로 저장소를 복제할 수 있습니다. 역할 기반 액세스 제어: 사용자와 저장소는 프로젝트로 구성됩니다. 사용자는 다양한 프로젝트의 이미지에 대해 다양한 권한을 가질 수 있습니다.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/ci__jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/ci__jenkins/</guid>
      <description>https://myminju.tistory.com/115 블로그 참조&#xA;01__Install &amp;amp; Start # 시스템에 젠킨스 레포지토리 추가 curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee \ /usr/share/keyrings/jenkins-keyring.asc &amp;gt; /dev/null echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \ https://pkg.jenkins.io/debian binary/ | sudo tee \ /etc/apt/sources.list.d/jenkins.list &amp;gt; /dev/null apt 업데이트 sudo apt update 젠킨스 설치 sudo apt install jenkins 접속 http://{인스턴스 IP}:8080&#xA;⚠️ 접속이 안 된다면 ?&#xA;보안그룹에 8080 포트 열어주었는지 확인 jenkins status 확인 # jenkins status 확인 sudo systemctl status jenkins # jenkins 시작 sudo systemctl start jenkins 8080 포트 열려있는지 확인 sudo ufw status # Status: inactive 라면 sudo ufw allow 8080 sudo ufw allow OpenSSH sudo ufw enable sudo ufw status 설정 초기 비밀번호 위치 : cat /var/lib/jenkins/secrets/initialAdminPassword 완료 설정 단계를 차례대로 진행하다 보면.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/ci__ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/ci__ansible/</guid>
      <description>Ansible # Ansible Install # (ubuntu 20.04)&#xA;설치&#xA;apt install python3-pip apt install ansible ansible -h apt-get install -y sshpass IP 등록&#xA;Guest Server 등록 및 python 경로 지정 vi /etc/ansible/hosts [all:vars]&#xA;ansible_python_interpreter=/usr/bin/python3 파이썬 경로 미지정 에러 ![[assets/Pasted image 20240221161139.png]]&#xA;Ping 테스트 ![[assets/Pasted image 20240221161125.png]]&#xA;Ansible PlayBook # Ansible은 기본적으로 PlayBook을 기준으로 스크립트를 작성한다. 또, 이 스크립트를 여러번 재실행하여도 이미 한번 적용된 패키지는 재설치하지 않고 건너뛰기 때문에 중복 실행에 대하여 안정성을 제공한다.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/ci__mino/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/ci__mino/</guid>
      <description>MinIO 바이너리 다운로드 # MinIO 서버 바이너리를 다운로드&#xA;bashCopy code&#xA;wget https://dl.min.io/server/minio/release/linux-amd64/minio chmod +x minio&#xA;MinIO 실행 # MinIO를 실행하기 전에, MinIO가 사용할 스토리지 디렉토리를 생성해야 합니다. 예를 들어, /data 디렉토리를 사용하려면 다음과 같이 디렉토리를 생성하세요:&#xA;bashCopy code&#xA;mkdir /data&#xA;그런 다음, 다음 명령어를 사용하여 MinIO 서버를 실행&#xA;bashCopy code&#xA;./minio server /data --console-address &amp;quot;:9001&amp;quot;&#xA;이 명령은 /data 디렉토리에 데이터를 저장하고, MinIO 콘솔을 9001 포트에서 사용할 수 있도록 설정합니다. MinIO 서버는 기본적으로 9000 포트에서 실행됩니다.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/cicd---%EB%B0%B0%ED%8F%AC%EB%B0%A9%EB%B2%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/cicd---%EB%B0%B0%ED%8F%AC%EB%B0%A9%EB%B2%95/</guid>
      <description>1_CI/CD # 2_Deploy # (SpringBoot&amp;amp;React 기준) __ 2.1_One Deploy # Docker 방식 스프링부트와 리엑트 함께 빌드해서 배포하는 방법 Build시 스프링부트 안의 Jar 안의 Static 폴더에 리엑트 빌드가 들어가 있다. __ 2.2_Two Deploy # Docker-compose 방식/ K8s 방식 스프링부트와 리엑트 각각 빌드해서 배포하는 방법 Build시 스프링부트와 리엑트를 각각 빌드 한 뒤 nginx 프록시를 이용하여 연동한다. 컨테이너 관리가 쉬운 이 방법이 테스트할 때 배포하기 가장 좋았고, 코드 수정이 용이 한 것 같다.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/nce_expert_%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%9A%94%EC%95%BD%EC%A0%95%EB%A6%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/nce_expert_%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%9A%94%EC%95%BD%EC%A0%95%EB%A6%AC/</guid>
      <description>대면시험 강남 네이버클라우드 11층&#xA;NCA 공부시간 1시간이면 충분 NCP 공부시간 3시간이면 충분&#xA;하지만 NCE는 좀 어렵다고 하니 차근차근 정리하자.&#xA;Chap 01 # Compute_301 # Xen : 리눅스 50g or 윈도우 100g&#xA;스토리지 10G-2TB 볼륨 암호화 서버에서 대해서 볼륨 암호화 디스크만 추가 가능 최대 16개 사용 가능 kvm : 리눅스 10-2TB, 윈도우 30-2TB&#xA;기본 스토리지 사이즈 변경 가능(정지 후) 스토리지 10-16TB 생성 최대 20개 사용 가능 CLI&#xA;java 어플리케이션으로 제작된 CLI, API를 통해서 네이버 클라우드 플랫폼의 다양한 리소스 제어 서버, Object Storage, Archive Storage CLI가 별도로 존재 Object Storage aws cli, aws api를 이용 Archive Storage keystone, swift의 cli, api를 이용 Compute 요금 : 컴퓨팅 , 네트워크, 스토리지(스토리지는 서버 정지에도 계속 발생)</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/2.-it_cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/2.-it_cloud/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/cd_istio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/cd_istio/</guid>
      <description>CD_</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/cd_k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/cd_k8s/</guid>
      <description>Kubernetes # ![[assets/Pasted image 20240319145726.png]]&#xA;__ Kubernetes Install # __ __ Reset # 클러스터 초기화: sudo kubeadm reset 모든 클러스터 서버에서 위의 명령어를 실행한다. 클러스터 노드 제거 kubectl drain &amp;lt;노드 이름&amp;gt; --delete-emptydir-data --force --ignore-daemonsets`` __ __ Common # Set SELinux to permissive mode:&#xA;These instructions are for Kubernetes 1.29.&#xA;# Set SELinux in permissive mode (effectively disabling it) sudo setenforce 0 sudo sed -i &amp;#39;s/^SELINUX=enforcing$/SELINUX=permissive/&amp;#39; /etc/selinux/config Add the Kubernetes yum repository</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/ci__docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/ci__docker/</guid>
      <description>Dockerfile&#xA;FROM jenkins/jenkins USER root root 접속&#xA;docker exec -u 0 -it mycontainer bash 컨테이너 격리 기술&#xA;네임 스페이스 각 프로세스가 파일 시스템 마운트, 네트워크, 유저, 호스트 네임등에 대해 시스템에 독립 뷰를 제공 컨트롤 그룹 프로세스로 소비할 수 있는 리소스의 양을 제한 Docker&#xA;Docker Engine : 이미지, 네트워크, 디스크 등의 관리 역할 Containerd: OCI 구현체(주로 runC)를 이용해 container를 관리해주는 daemon 두 프로그램은 독립 실행하기 때문에 각 이미지에 영향이 없음 ![[assets/Pasted image 20240325153944.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/2.-it_cloud/dns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-it_cloud/dns/</guid>
      <description> 리소스 레코드 # 레코드 설명 A 레코드 가장 기본적인 유형으로 도메인 이름을 IP에 직접 매핑하는 레코드 소유 도메인 및 그 하위 도메인의 IP 주소(IPv4) 지정 가능 AAAA(IPv6) 레코드 A 레코드와 동일한 방식이나 A 레코드는 IPv4 주소 체계에서 사용되고 AAAA 레코드는 IPv6 주소 체계에서 사용 소유 도메인 및 그 하위 도메인의 IPv6 주소 지정 가능 CNAME(도메인 별명) 레코드 도메인 이름에 별명(alias)을 지정하는 레코드로 하나의 도메인 이름을 다른 도메인 이름으로 매핑 단, CNAME 레코드는 다른 레코드와 공존 불가 CNAME 레코드는 다른 모든 유형의 레코드와 충돌하므로 CNAME 레코드를 사용하려면 다른 레코드를 삭제 필요 MX(메일 서버) 레코드 사용자가 보유한 도메인과 하위 도메인 중 메일을 수신할 서버를 지정하는 레코드 Preference가 작을수록 높은 우선 순위를 가짐 SPF(스팸 처리 방지) 레코드 보안 정책을 지정하여 수신한 메일에 표시된 발송자 정보와 실제 메일 서버에 있는 정보가 일치하는지 확인하는 메일 검증 레코드 주로 스팸 메일을 방지하기 위해 스팸 메일을 송신한 서버의 IP 주소나 도메인 이름 등의 정보를 명시해 메일 주소 사칭 방지 TXT(도메인 설명) 레코드 도메인에 텍스트 정보를 추가하여 유효한 도메인인지 판단하는 레코드 SPF 레코드와 같은 용도로 사용 SRV 레코드 서비스를 호스팅 하는 서버의 위치(호스트 이름 및 포트 번호)를 저장하기 위해서 사용하는 레코드 CAA 레코드 특정 도메인에 대한 인증서를 발급한 인증 기관(Certificate Authority, CA)을 확인하는 레코드 잘못된 CA가 도메인에 대한 가짜 인증서를 발급하는 것 방지 DS 레코드 Delegation Signer(DS)는 위임에 대한 서명자(signer)라는 뜻으로 DNSSEC에서 서명이 있는 영역을 식별하는 데 필요한 데이터를 저장하는 레코드 </description>
    </item>
  </channel>
</rss>
